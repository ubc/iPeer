{"version":3,"mappings":"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","names":["_hoisted_1","_createElementVNode","_hoisted_3","peerQuestion","computed","defineAsyncComponent","selfQuestion","useRoute","useRouter","ref","toRef","props","evaluation","form","reactive","map","member","initialState","peer_questions","filter","_b","self_questions","getInitialState","_a","response","setInitialState","data","question","find","review","isEmpty","details","detail","precision","grade","unref","_c"],"sources":["../../../../vue-ts-ipeer/src/components/icons/IconThoughtBubble.vue","../../../../vue-ts-ipeer/src/student/views/templates/renderer/MixedEvaluationPeerQuestions.vue","../../../../vue-ts-ipeer/src/student/views/templates/renderer/MixedEvaluationSelfQuestions.vue","../../../../vue-ts-ipeer/src/student/views/templates/MixedEvaluation.vue"],"sourcesContent":["<template>\n  <svg id=\"emoji\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g id=\"line\">\n      <path d=\"m21.49 62.77c3.309 0 6-2.691 6-6s-2.691-6-6-6-6 2.691-6 6 2.691 6 6 6zm0-10c2.206 0 4 1.794 4 4 0 2.206-1.794 4-4 4-2.206 0-4-1.794-4-4 0-2.206 1.794-4 4-4z\"/>\n      <path d=\"m12.36 66.78c1.728 0 3.135-1.406 3.135-3.135s-1.406-3.135-3.135-3.135-3.135 1.406-3.135 3.135 1.406 3.135 3.135 3.135zm0-4.27c0.6255 0 1.135 0.5088 1.135 1.135 0 0.6259-0.5093 1.135-1.135 1.135s-1.135-0.5088-1.135-1.135c0-0.626 0.5092-1.135 1.135-1.135z\"/>\n      <path fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" d=\"m17.49 48.58c-1.042-1.779-1.544-3.895-1.31-6.103 0.0786-0.7397 0.2418-1.449 0.4687-2.126-4.569-1.322-7.676-5.758-7.156-10.65 0.5836-5.492 5.509-9.471 11-8.887 0.881 0.0936 1.717 0.3098 2.508 0.6113 1.407-7.636 8.471-13.02 16.32-12.19 6.706 0.7126 11.91 5.74 13.14 12.03 0.3856-0.0038 0.7741 0.0084 1.167 0.0501 5.492 0.5836 9.471 5.509 8.887 11-0.3338 3.141-2.091 5.782-4.558 7.363 0.0658 0.8881 0.066 1.792-0.0315 2.709-0.8755 8.238-8.263 14.21-16.5 13.33-3.578-0.3802-6.725-1.991-9.072-4.364-0.8269 0.6584-1.757 1.187-2.758 1.559\"/>\n    </g>\n  </svg>\n</template>","<script lang=\"ts\" setup>\nimport { computed, defineAsyncComponent } from 'vue'\n\nimport type {Evaluation, MixedResponse, MixedReviewData, User} from '@/types/typings'\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:initialState', option: object): void\n  (e: 'update:modelValue', option: string): void\n}>()\nconst props = defineProps<{\n  members: User[],\n  currentUser: User,\n  evaluation: Evaluation,\n  question: MixedReviewData,\n  initialState: MixedResponse\n}>()\n\n// DATA\n// COMPUTED\nconst peerQuestion = computed(() => {\n  if(props.question?.type) {\n    return defineAsyncComponent({\n      loader: () => import(`../../questions/PeerMixed${props.question?.type}Question.vue`),\n      loadingComponent: `<div class=\"w-full h-128 bg-gold-100\">L O A D I N G...</div>`\n    })\n  }\n})\n/** _backup for computing peerQuestion above\nconst peerQuestion = computed(() => {\n  switch (props.question?.type) {\n    case 'Likert':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedLikertQuestion.vue'))\n    case 'Range':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedRangeQuestion.vue'))\n    case 'Comment':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedCommentQuestion.vue'))\n    case 'Sentence':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedSentenceQuestion.vue'))\n    case 'Paragraph':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedParagraphQuestion.vue'))\n    default:\n      break\n  }\n})*/\n// METHODS\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <component\n    v-if=\"props.question\"\n    :is=\"peerQuestion\"\n    :question=\"props.question\"\n    :evaluation=\"props.evaluation\"\n    :members=\"props.members\"\n    :initial-state=\"props.initialState\"\n    @update:initialState=\"$emit('update:initialState', $event)\"\n  />\n</template>\n","<script lang=\"ts\" setup>\nimport { ref, reactive, watch, computed, onMounted, watchEffect, defineAsyncComponent } from 'vue'\n\nimport type {Evaluation, MixedResponse, MixedReviewData, User} from '@/types/typings'\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:initialState', option: object): void\n  (e: 'update:modelValue', option: string): void\n}>()\nconst props = defineProps<{\n  currentUser: User,\n  evaluation: Evaluation,\n  question: MixedReviewData,\n  initialState: MixedResponse\n}>()\n\n// DATA\n// COMPUTED\nconst selfQuestion = computed(() => {\n  if(props.question?.type) {\n    return defineAsyncComponent({\n      loader: () => import(`../../questions/SelfMixed${props.question?.type}Question.vue`),\n      loadingComponent: `<div class=\"w-full h-128 bg-gold-100\">L O A D I N G...</div>`\n    })\n  }\n})\n/** _backup for computing selfQuestion above\nconst selfQuestion = computed(() => {\n  switch (props.question?.type) {\n    case 'Likert':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedLikertQuestion.vue'))\n    case 'Sentence':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedSentenceQuestion.vue'))\n    case 'Paragraph':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedParagraphQuestion.vue'))\n    default:\n      break\n  }\n})*/\n// METHODS\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <component\n    v-if=\"props.question\"\n    :is=\"selfQuestion\"\n    :question=\"props.question\"\n    :evaluation=\"props.evaluation\"\n    :current-user=\"props.currentUser\"\n    :initial-state=\"props.initialState\"\n    @update:initialState=\"$emit('update:initialState', $event)\"\n  />\n</template>\n","<script lang=\"ts\" setup>\nimport {ref, unref, toRef, reactive, computed, onBeforeMount} from 'vue';\nimport { useRoute, useRouter } from 'vue-router'\nimport { isEmpty, map, find, filter, findIndex } from 'lodash'\n\nimport EvaluationForm from '@/student/views/EvaluationForm.vue'\nimport PeerQuestions from '@/student/views/templates/renderer/MixedEvaluationPeerQuestions.vue'\nimport SelfQuestions from '@/student/views/templates/renderer/MixedEvaluationSelfQuestions.vue'\nimport CustomHiddenField from \"@/components/fields/CustomHiddenField.vue\";\nimport { IconThoughtBubble } from '@/components/icons'\nimport TakeNote from '@/student/components/TakeNote.vue'\nimport SectionSubtitle from '@/components/SectionSubtitle.vue'\n\nimport type {User, Evaluation, MixedReviewData, MixedResponse, MixedResponseData, MixedResponseDataDetail} from '@/types/typings'\n\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'fetch:evaluation'): void\n}>()\nconst props = defineProps<{\n  members: User[]\n  currentUser: User\n  evaluation: Evaluation\n}>()\nconst route = useRoute()\nconst router = useRouter()\n// DATA\nconst evaluation_form   = ref(null)\nconst members           = toRef<User[]|any>(props, 'members')\nconst evaluation        = toRef<Evaluation|any>(props, 'evaluation')\nconst form              = reactive({\n  event_id: computed(() => evaluation.value?.id),\n  group_id: computed(() => evaluation.value?.group?.id),\n  course_id: computed(() => evaluation.value?.course?.id),\n  group_event_id: computed(() => evaluation.value?.group_event_id),\n  template_id: computed(() => evaluation.value?.template_id),\n  member_count: computed(() => evaluation.value?.members?.length),\n  user_id: computed(() => props.currentUser?.id),\n  evaluatee_count: computed(() => evaluation.value?.members?.length),\n  member_ids: computed<string[]>(() => map(evaluation.value?.members, member => member.id))\n})\nconst initialState      = ref<MixedResponseData|any>({})\n// COMPUTED\nconst peer_questions = computed(() => filter(evaluation.value?.review?.data, { self_eval: false }))\nconst self_questions = computed(() => filter(evaluation.value?.review?.data, { self_eval: true }))\n// METHODS\nfunction getInitialState() {\n  return {\n    id: '',\n    submitter_id: evaluation.value?.id,\n    submitted: null,\n    date_submitted: '',\n    data: map(props.evaluation?.members, (member: User) => {\n      return {\n        evaluator: props.currentUser.id,\n        evaluatee: member.id,\n        score: '',\n        comment_release: '',\n        grade_release: '',\n        details: map(evaluation.value?.review?.data, (response: MixedResponseDataDetail) => {\n          return {\n            evaluation_mixeval_id: '',\n            question_number: response?.question_num,\n            question_comment: null,\n            selected_lom: null,\n            grade: '',\n            comment_release: '0',\n            record_status: 'A',\n          }\n        })??[]\n      }\n    })\n  }\n\n    /**\n  return map(props.evaluation?.members, (member: User) => {\n    return {\n      evaluator: props.currentUser.id,\n      evaluatee: member.id,\n      score: '',\n      comment_release: '',\n      grade_release: '',\n      details: map(evaluation.value?.review?.data, (response: MixedReviewData) => {\n        return {\n          evaluation_mixeval_id: '',\n          question_number: response?.question_num,\n          question_comment: null,\n          selected_lom: null,\n          grade: '',\n          comment_release: '0',\n          record_status: 'A',\n        }\n      })??[]\n    }\n  })*/\n}\nfunction setInitialState(data: {member_id: string, question_num: string, event: { key: string, value: string }}): void {\n  /** Dynamically update question state */\n  const review = evaluation.value?.review\n  const question = find(review?.data, { question_num: data.question_num })\n  const response = !isEmpty(initialState.value) ? initialState.value?.data : {}\n\n  const details = find(response, { evaluatee: data.member_id}).details\n  const detail = find(details, { question_number: data.question_num })\n\n  // TODO:: use spreader to mutate\n  // TODO:: in progress auto-save while editing\n  // console.log(JSON.stringify(detail, null, 2))\n  if(data?.event?.key === 'selected_lom') {\n    const precision = Math.pow(10, 1)\n    const grade = parseInt(question?.multiplier) / (question?.loms.length - parseInt(review?.zero_mark)) * parseInt(data.event.value)\n    Object.assign(detail, {\n      [data.event.key]: data.event.value,\n      grade: Math.floor(grade * precision) / precision,\n    })\n  } else if(data.event.key === 'question_comment') {\n    Object.assign(detail, {\n      [data.event.key]: data.event.value\n    })\n  } else return\n}\n// WATCH\n// LIFECYCLE\nonBeforeMount(() => {\n  /** [If New response] Generate a response state based on review object shape */\n  /** NOTE:: If the self-eval gets enabled after the evaluation is already initiated the self-eval won't get added\n   * and will through an error exception for the current user NOT being updated (could a bug or feature) */\n  if(evaluation.value?.response && !isEmpty(evaluation.value?.response)) {\n    initialState.value = Object.assign(getInitialState(), unref(evaluation.value?.response))\n  } else {\n    initialState.value = getInitialState()\n\n    /** Experimental\n    initialState.value = {\n      id: '',\n      submitter_id: props.currentUser.id,\n      submitted: null,\n      date_submitted: '',\n      data: getInitialState()\n    }*/\n  }\n})\n</script>\n\n<template>\n  <EvaluationForm\n      @submit=\"onSubmit\"\n      :initial-state=\"initialState\"\n      :evaluation=\"props.evaluation\"\n      v-slot=\"{ onSave, errors, values, isSubmitting, evaluationRef, formMeta }\"\n  >\n    <slot name=\"header\">\n      <CustomHiddenField name=\"data[data][submitter_id]\" :value=\"form.user_id\" />\n      <CustomHiddenField name=\"data[data][event_id]\" :value=\"form.event_id\" />\n      <CustomHiddenField name=\"data[data][template_id]\" :value=\"form.template_id\" />\n      <CustomHiddenField name=\"data[data][grp_event_id]\" :value=\"form.group_event_id\" />\n      <CustomHiddenField name=\"data[data][members]\" :value=\"form.member_count\" />\n      <template v-if=\"findIndex(evaluation?.review?.data, q => q.type === 'Likert') !== -1\">\n        <template v-for=\"member of evaluation?.members\" :key=\"member.id\">\n          <CustomHiddenField :name=\"`data[${member.id}][Evaluation][evaluatee_id]`\" :value=\"member.id\" />\n          <CustomHiddenField :name=\"`data[${member.id}][Evaluation][evaluator_id]`\" :value=\"form.user_id\" />\n          <CustomHiddenField :name=\"`data[${member.id}][Evaluation][event_id]`\" :value=\"form.event_id\" />\n          <CustomHiddenField :name=\"`data[${member.id}][Evaluation][group_event_id]`\" :value=\"form.group_event_id\" />\n          <CustomHiddenField :name=\"`data[${member.id}][Evaluation][group_id]`\" :value=\"form.group_id\" />\n        </template>\n      </template>\n      <template v-if=\"parseInt(evaluation?.self_eval) && parseInt(evaluation?.review?.self_eval) > 0\">\n        <CustomHiddenField :name=\"`data[${form.user_id}][Self-Evaluation][evaluatee_id]`\" :value=\"form.user_id\" />\n        <CustomHiddenField :name=\"`data[${form.user_id}][Self-Evaluation][evaluator_id]`\" :value=\"form.user_id\" />\n        <CustomHiddenField :name=\"`data[${form.user_id}][Self-Evaluation][event_id]`\" :value=\"form.event_id\" />\n        <CustomHiddenField :name=\"`data[${form.user_id}][Self-Evaluation][group_event_id]`\" :value=\"form.group_event_id\" />\n        <CustomHiddenField :name=\"`data[${form.user_id}][Self-Evaluation][group_id]`\" :value=\"form.group_id\" />\n      </template>\n    </slot>\n\n    <slot name=\"main\">\n      <PeerQuestions\n          v-for=\"question of peer_questions\" :key=\"question.id\"\n          :members=\"members\"\n          :question=\"question\"\n          :evaluation=\"evaluation\"\n          :initial-state=\"initialState\"\n          :current-user=\"props.currentUser\"\n          @update:initialState=\"setInitialState\"\n      />\n\n      <SectionSubtitle\n          v-if=\"parseInt(evaluation?.self_eval) && parseInt(evaluation?.review?.self_eval) > 0\"\n          subtitle=\"Evaluate yourself\"\n          :icon=\"{src: IconThoughtBubble, size: '3rem'}\"\n      >\n        <div class=\"self-evaluation my-8 space-y-8\">\n          <SelfQuestions\n              v-for=\"(question, idx) of self_questions\" :key=\"question.id\"\n              :idx=\"idx\"\n              :question=\"question\"\n              :evaluation=\"evaluation\"\n              :initial-state=\"initialState\"\n              :current-user=\"props.currentUser\"\n              @update:initialState=\"setInitialState\"\n          />\n        </div>\n      </SectionSubtitle>\n    </slot>\n\n    <slot name=\"footer\"></slot>\n\n    <slot name=\"cta\" :on-save=\"onSave\" :is-submitting=\"isSubmitting\" :values=\"values\"></slot>\n  </EvaluationForm>\n</template>\n"],"file":"js/vue/MixedEvaluation.js"}