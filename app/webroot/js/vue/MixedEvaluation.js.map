{"version":3,"mappings":"+bACUA,EAAO,CAAC,WAAoB,QAAkC,mDAEsGC,EAAF,iBACtKA,EAAyQ,QAAnQ,EAAE,8JAA+P,GACvQA,EAAgpB,4QAA/nBA,UAAC,KAAM,OAAQ,cAAuB,yBAAwB,kBAAiB,QAAM,oBAAgB,KAAC,eAAuhB,miBAC5oBC,QALN,shBCeIC,EAAeC,EAAS,IAAM,OAC1B,YAAM,WAAN,cAAgB,KAAM,CAC5B,IAAK,SACI,SAAqB,IAAMC,aAAO,gCAAwD,iTACnG,IAAK,QACI,SAAqB,IAAMA,aAAO,+BAAuD,2EAClG,IAAK,UACI,SAAqB,IAAMA,aAAO,iCAAyD,6EACpG,IAAK,WACI,SAAqB,IAAMA,aAAO,kCAA0D,6RACrG,IAAK,YACI,SAAqB,IAAMA,aAAO,mCAA2D,6RAGxG,EACD,EAED,SAASC,EAAWC,EAAO,CACzBC,EAAK,cAAeD,CAAK,CAC3B,uxBClBME,EAAeL,EAAS,IAAM,OAC1B,YAAM,WAAN,cAAgB,KAAM,CAC5B,IAAK,SACK,SAAqB,IAAMC,aAAO,gCAAwD,sQACpG,IAAK,WACK,SAAqB,IAAMA,aAAO,kCAA0D,wQACtG,IAAK,YACK,SAAqB,IAAMA,aAAO,mCAA2D,wQAGzG,EACD,EAED,SAASC,EAAWC,EAAO,CACzBC,EAAK,cAAeD,CAAK,CAC3B,szBCVcG,EAAS,EACRC,EAAU,EAGDC,EAAI,EACtB,QAAgBC,EAAMC,EAAO,YAAY,EAC/C,IAAIC,EAAkBC,EAAS,CAC7B,SAAUZ,EAAS,WAAM,WAAW,QAAX,cAAkB,GAAE,EAC7C,SAAUA,EAAS,IAAM,uBAAW,QAAX,cAAkB,QAAlB,cAAyB,GAAE,EACpD,UAAWA,EAAS,IAAM,uBAAW,QAAX,cAAkB,SAAlB,cAA0B,GAAE,EACtD,eAAgBA,EAAS,WAAM,WAAW,QAAX,cAAkB,eAAc,EAC/D,YAAaA,EAAS,WAAM,WAAW,QAAX,cAAkB,YAAW,EACzD,aAAcA,EAAS,IAAM,uBAAW,QAAX,cAAkB,UAAlB,cAA2B,OAAM,EAC9D,QAASA,EAAS,WAAM,WAAM,cAAN,cAAmB,GAAE,EAC7C,gBAAiBA,EAAS,IAAM,uBAAW,QAAX,cAAkB,UAAlB,cAA2B,OAAM,EACjE,WAAYA,EAAmB,WAAMa,SAAI,iBAAW,QAAX,cAAkB,QAASC,GAAUA,EAAO,EAAE,EAAC,EACzF,EACK,QAAgBd,EAAyC,IAAM,mBAChE,eAAW,QAAX,cAAkB,SAAlB,cAA0B,WAAY,CAACe,mBAAQC,OAAW,QAAX,cAAkB,SAAlB,cAA0B,QAAQ,EAC3EC,GAAMC,OAAW,QAAX,cAAkB,SAAlB,cAA0B,QAAQ,EAExC,CACL,cAAcC,IAAW,QAAX,cAAkB,GAChC,UAAW,KACX,eAAgB,GAChB,KAAM,CACJ,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EAEJ,CACD,EAEKC,EAAiBpB,EAAS,IAAMqB,kCAAOC,OAAW,QAAX,cAAkB,SAAlB,cAA0B,KAAM,CAAE,UAAW,EAAM,CAAC,EAAC,EAC5FC,EAAiBvB,EAAS,IAAMqB,kCAAOC,OAAW,QAAX,cAAkB,SAAlB,cAA0B,KAAM,CAAE,UAAW,EAAK,CAAC,EAAC,EAG3FE,EAASC,EAAO,CACpB,SAAUC,IAAQ,GACdD,EAAO,CACL,KAAMC,IAAQ,GACVD,EAAO,CACL,IAAKE,EAAO,EAAE,SAAS,EACvB,SAAUC,EAAO,EAAE,SAAS,EAAE,IAAI,EAAE,EACpC,UAAWA,EAAO,EAAE,SAAS,EAAE,IAAI,EAAE,EACtC,CACL,EACD,CACL,EACD","names":["_hoisted_1","_createElementVNode","_hoisted_3","peerQuestion","computed","__vitePreload","updateForm","event","emit","selfQuestion","useRoute","useRouter","ref","toRef","props","form","reactive","map","member","isEmpty","_d","unref","_f","_g","peer_questions","filter","_b","self_questions","schema","object","array","number","string"],"sources":["../../../../vue-ts-ipeer/src/components/icons/IconThoughtBubble.vue","../../../../vue-ts-ipeer/src/student/views/MixedEvaluationPeerQuestions.vue","../../../../vue-ts-ipeer/src/student/views/MixedEvaluationSelfQuestions.vue","../../../../vue-ts-ipeer/src/student/views/templates/MixedEvaluation.vue"],"sourcesContent":["<template>\n  <svg id=\"emoji\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g id=\"line\">\n      <path d=\"m21.49 62.77c3.309 0 6-2.691 6-6s-2.691-6-6-6-6 2.691-6 6 2.691 6 6 6zm0-10c2.206 0 4 1.794 4 4 0 2.206-1.794 4-4 4-2.206 0-4-1.794-4-4 0-2.206 1.794-4 4-4z\"/>\n      <path d=\"m12.36 66.78c1.728 0 3.135-1.406 3.135-3.135s-1.406-3.135-3.135-3.135-3.135 1.406-3.135 3.135 1.406 3.135 3.135 3.135zm0-4.27c0.6255 0 1.135 0.5088 1.135 1.135 0 0.6259-0.5093 1.135-1.135 1.135s-1.135-0.5088-1.135-1.135c0-0.626 0.5092-1.135 1.135-1.135z\"/>\n      <path fill=\"none\" stroke=\"#000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" d=\"m17.49 48.58c-1.042-1.779-1.544-3.895-1.31-6.103 0.0786-0.7397 0.2418-1.449 0.4687-2.126-4.569-1.322-7.676-5.758-7.156-10.65 0.5836-5.492 5.509-9.471 11-8.887 0.881 0.0936 1.717 0.3098 2.508 0.6113 1.407-7.636 8.471-13.02 16.32-12.19 6.706 0.7126 11.91 5.74 13.14 12.03 0.3856-0.0038 0.7741 0.0084 1.167 0.0501 5.492 0.5836 9.471 5.509 8.887 11-0.3338 3.141-2.091 5.782-4.558 7.363 0.0658 0.8881 0.066 1.792-0.0315 2.709-0.8755 8.238-8.263 14.21-16.5 13.33-3.578-0.3802-6.725-1.991-9.072-4.364-0.8269 0.6584-1.757 1.187-2.758 1.559\"/>\n    </g>\n  </svg>\n</template>","<script lang=\"ts\" setup>\nimport { ref, reactive, watch, computed, onMounted, watchEffect, defineAsyncComponent } from 'vue';\n\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:form', option: object): void\n  (e: 'update:modelValue', option: string): void\n}>()\nconst props = defineProps<{\n  question: object,\n  form: object,\n  members: object[],\n}>()\n\n// DATA\n// COMPUTED\nconst peerQuestion = computed(() => {\n  switch (props.question?.type) {\n    case 'Likert':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedLikertQuestion.vue'))\n    case 'Range':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedRangeQuestion.vue'))\n    case 'Comment':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedCommentQuestion.vue'))\n    case 'Sentence':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedSentenceQuestion.vue'))\n    case 'Paragraph':\n      return defineAsyncComponent(() => import('@/student/views/questions/PeerMixedParagraphQuestion.vue'))\n    default:\n      break\n  }\n})\n// METHODS\nfunction updateForm(event) {\n  emit('update:form', event)\n}\n\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <div :class=\"`datatable question_${question.question_num} mx-4`\">\n    <div class=\"question\">{{ question.question_num }}. {{ question.title }} <span class=\"text-red-500\" v-if=\"question.required\">*</span></div>\n    <div class=\"description text-sm text-slate-900 leading-relaxed mx-4 mb-2\">{{ question.instructions }}</div>\n    <component\n        :is=\"peerQuestion\"\n        :members=\"props.members\"\n        :question=\"props.question\"\n        :initial-state=\"props.initialState\"\n        @update:form=\"updateForm\"\n    />\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport { ref, reactive, watch, computed, onMounted, watchEffect, defineAsyncComponent } from 'vue'\n\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:form', option: object): void\n  (e: 'update:modelValue', option: string): void\n}>()\nconst props = defineProps<{\n  question: object,\n  currentUser: object,\n  initialState: object,\n}>()\n\n// DATA\n// const selfQuestion = ref(null)\n// COMPUTED\nconst selfQuestion = computed(() => {\n  switch (props.question?.type) {\n    case 'Likert':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedLikertQuestion.vue'))\n    case 'Sentence':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedSentenceQuestion.vue'))\n    case 'Paragraph':\n      return  defineAsyncComponent(() => import('@/student/views/questions/SelfMixedParagraphQuestion.vue'))\n    default:\n      break\n  }\n})\n// METHODS\nfunction updateForm(event) {\n  emit('update:form', event)\n}\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <component\n    v-if=\"question\"\n    :is=\"selfQuestion\"\n    :question=\"question\"\n    :current-user=\"currentUser\"\n    :initial-state=\"initialState\"\n    @update:form=\"updateForm\"\n  />\n</template>\n<!--\n<template>\n  <div :class=\"`datatable question_${question.question_num} mx-4`\">\n    <div class=\"question\">{{ question.question_num }}. {{ question.title }} <span class=\"text-red-500\" v-if=\"question.required\">*</span></div>\n    <div class=\"description text-sm text-slate-900 leading-relaxed mx-4 mb-2\">{{ question.instructions }}</div>\n    <component v-if=\"question\"\n        class=\"\"\n        :is=\"selfQuestion\"\n        :question=\"question\"\n        :current-user=\"currentUser\"\n        :initial-state=\"initialState\"\n        @update:form=\"updateForm\"\n    />\n\n  </div>\n</template>-->\n","<script lang=\"ts\" setup>\nimport {ref, unref, toRef, reactive, watch, computed, onMounted, defineAsyncComponent} from 'vue';\nimport { useRoute, useRouter } from 'vue-router'\nimport { isEmpty, map, filter } from 'lodash'\nimport { array, object, string, number } from 'yup'\n\nimport { IconThoughtBubble } from '@/components/icons'\nimport TakeNote from '@/student/components/TakeNote.vue'\nimport SectionSubtitle from '@/components/SectionSubtitle.vue'\nimport EvaluationForm from '@/student/views/EvaluationForm.vue'\nimport PeerQuestions from '@/student/views/MixedEvaluationPeerQuestions.vue'\nimport SelfQuestions from '@/student/views/MixedEvaluationSelfQuestions.vue'\n\nimport {Evaluation, EvaluationReviewResponse, User} from \"@/types/typings\";\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'fetch:evaluation'): void\n}>()\nconst props = defineProps<{\n  currentUser: User\n  evaluation: Evaluation\n}>()\nconst route = useRoute()\nconst router = useRouter()\n\n// DATA\nconst evaluation_form = ref()\nconst evaluation    = toRef(props, 'evaluation')\nlet form            = reactive({\n  event_id: computed(() => evaluation.value?.id),\n  group_id: computed(() => evaluation.value?.group?.id),\n  course_id: computed(() => evaluation.value?.course?.id),\n  group_event_id: computed(() => evaluation.value?.group_event_id),\n  template_id: computed(() => evaluation.value?.template_id),\n  member_count: computed(() => evaluation.value?.members?.length),\n  user_id: computed(() => props.currentUser?.id),\n  evaluatee_count: computed(() => evaluation.value?.members?.length),\n  member_ids: computed<string[]>(() => map(evaluation.value?.members, member => member.id))\n})\nconst initialState  = computed<EvaluationReviewResponse | any>(() => {\n  if(evaluation.value?.review?.response && !isEmpty(evaluation.value?.review?.response)) {\n    return unref(evaluation.value?.review?.response)\n  } else {\n    return {\n      submitter_id: evaluation.value?.id,\n      submitted: null,\n      date_submitted: '',\n      data: {\n        points: [],\n        comments: []\n      }\n    }\n  }\n})\n// COMPUTED\nconst peer_questions = computed(() => filter(evaluation.value?.review?.data, { self_eval: false }))\nconst self_questions = computed(() => filter(evaluation.value?.review?.data, { self_eval: true }))\n// METHODS\n// TBD\nconst schema = object({\n  response: array().of(\n      object({\n        data: array().of(\n            object({\n              lom: number().required(),\n              sentence: string().required().min(10),\n              paragraph: string().required().min(10),\n            })\n        )\n      })\n  )\n})\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <EvaluationForm\n      @submit=\"onSubmit\"\n      :initial-state=\"initialState\"\n      :validation-schema=\"schema\"\n      :evaluation=\"props.evaluation\"\n      v-slot=\"{ onSave, errors, values, isSubmitting, evaluationRef }\"\n  >\n    <slot name=\"header\">\n      <input type=\"hidden\" name=\"data[data][submitter_id]\" :value=\"form.user_id\" />\n      <input type=\"hidden\" name=\"data[data][event_id]\" :value=\"form.event_id\" />\n      <input type=\"hidden\" name=\"data[data][template_id]\" :value=\"form.template_id\" />\n      <input type=\"hidden\" name=\"data[data][grp_event_id]\" :value=\"form.group_event_id\" />\n      <input type=\"hidden\" name=\"data[data][members]\" :value=\"form.member_count\" />\n\n      <template v-for=\"member of evaluation?.members\" :key=\"member.id\">\n        <input type=\"hidden\" :name=\"`data[${member.id}][Evaluation][evaluatee_id]`\" :value=\"member.id\">\n        <input type=\"hidden\" :name=\"`data[${member.id}][Evaluation][evaluator_id]`\" :value=\"form.user_id\" />\n        <input type=\"hidden\" :name=\"`data[${member.id}][Evaluation][event_id]`\" :value=\"form.event_id\" />\n        <input type=\"hidden\" :name=\"`data[${member.id}][Evaluation][group_event_id]`\" :value=\"form.group_event_id\" />\n        <input type=\"hidden\" :name=\"`data[${member.id}][Evaluation][group_id]`\" :value=\"form.group_id\" />\n      </template>\n\n      <template v-if=\"peer_questions?.length\">\n        <input type=\"hidden\" :name=\"`data[${form.user_id}][Self-Evaluation][evaluatee_id]`\" :value=\"form.user_id\">\n        <input type=\"hidden\" :name=\"`data[${form.user_id}][Self-Evaluation][evaluator_id]`\" :value=\"form.user_id\" />\n        <input type=\"hidden\" :name=\"`data[${form.user_id}][Self-Evaluation][event_id]`\" :value=\"form.event_id\" />\n        <input type=\"hidden\" :name=\"`data[${form.user_id}][Self-Evaluation][group_event_id]`\" :value=\"form.group_event_id\" />\n        <input type=\"hidden\" :name=\"`data[${form.user_id}][Self-Evaluation][group_id]`\" :value=\"form.group_id\" />\n      </template>\n    </slot>\n\n    <slot name=\"main\">\n      <PeerQuestions\n          v-for=\"question of peer_questions\" :key=\"question.id\"\n          :members=\"props.evaluation?.members\"\n          :question=\"question\"\n          :initial-state=\"initialState\"\n          :current-user=\"props.currentUser\"\n          @update:form=\"updateForm\"\n      />\n      <SectionSubtitle\n          v-if=\"evaluation?.self_eval && evaluation?.review?.self_eval > 0\"\n          subtitle=\"Evaluate yourself\"\n          :icon=\"{src: IconThoughtBubble, size: '3rem'}\"\n      >\n        <div class=\"self-evaluation my-8 space-y-8\">\n          <SelfQuestions\n              v-for=\"(question, idx) of self_questions\" :key=\"question.id\"\n              :idx=\"idx\"\n              :question=\"question\"\n              :initial-state=\"props.initialState\"\n              :current-user=\"props.currentUser\"\n              @update:form=\"updateForm\"\n          />\n        </div>\n      </SectionSubtitle>\n    </slot>\n\n    <slot name=\"footer\"></slot>\n\n    <slot name=\"cta\" :on-save=\"onSave\" :is-submitting=\"isSubmitting\" :values=\"values\"></slot>\n  </EvaluationForm>\n</template>\n"],"file":"js/vue/MixedEvaluation.js"}