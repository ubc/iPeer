{"version":3,"file":"CustomVeeField.js","sources":["../../../../vue-ts-ipeer/src/components/fields/CustomVeeField.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport {ref, reactive, watch, computed, onMounted, toRef, onBeforeUnmount} from 'vue';\nimport { Field, ErrorMessage, useField } from 'vee-validate'\nimport autosize from 'autosize'\nimport {Props} from \"@/components/fields/InputRange.vue\";\n\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:modelValue', option: string): void\n  (e: 'update:event', option: string): void\n}>()\ninterface Props {\n  as?: string\n  type?: string\n  label?: string\n  name: string\n  value: null\n  modelValue: null\n  rules?: string\n  default?: string\n  disabled?: boolean\n}\nconst props = withDefaults(defineProps<Props>(), {\n  as: 'input',\n  type: 'text',\n  disabled: false,\n  rules: undefined\n})\nconst name        = toRef(props, 'name');\nconst { value: inputValue, handleChange, errorMessage, handleBlur, meta } = useField(name, props.rules, {\n  type: props.type,\n  initialValue: props.value,\n  validateOnValueUpdate: false\n});\n// DATA\nconst elementRef  = ref()\nconst defaultValue = ref(props.default)\nconst validationListeners = {\n  blur: handleChange,\n  change: handleChange,\n  input: (e: unknown) => handleChange(e, !!errorMessage.value)\n}\n// COMPUTED\n// METHODS\n// WATCH\n// LIFECYCLE\nonMounted(() => autosize(elementRef.value))\nonBeforeUnmount(() => autosize.destroy(elementRef.value))\n</script>\n\n<template>\n  <label class=\"flex flex-col\" :class=\"{ 'has-error': !!errorMessage, success: meta.valid }\">\n    <span v-if=\"label\">{{ label }}</span>\n    <template v-if=\"props.as === 'textarea'\">\n      <textarea\n        ref=\"elementRef\"\n        class=\"form-field\"\n        :name=\"name\"\n        :value=\"inputValue\"\n        :disabled=\"disabled\"\n        @change=\"$emit('update:event', $event)\"\n        @input=\"handleChange\"\n        @blur=\"handleBlur\"\n        v-on=\"validationListeners\"\n        v-bind=\"$attrs\"\n      ></textarea>\n    </template>\n    <template v-if=\"props.as === 'input'\">\n      <input\n          :type=\"type\"\n          class=\"form-field\"\n          :name=\"name\"\n          :value=\"inputValue\"\n          :disabled=\"disabled\"\n          @change=\"$emit('update:event', $event)\"\n          @input=\"handleChange\"\n          @blur=\"handleBlur\"\n          v-on=\"validationListeners\"\n          v-bind=\"$attrs\"\n      >\n    </template>\n    <template v-if=\"props.as === 'select'\">\n      <select\n          class=\"form-field\"\n          :name=\"name\"\n          :disabled=\"disabled\"\n          @change=\"$emit('update:event', $event)\"\n          @input=\"handleChange\"\n          v-on=\"validationListeners\"\n          v-bind=\"$attrs\"\n      >\n        <option v-if=\"defaultValue\" :value=\"defaultValue\">{{ defaultValue }}</option>\n        <slot />\n      </select>\n    </template>\n    <ErrorMessage v-if=\"props.type !== 'radio'\" class=\"form-text text-muted\" :name=\"name\" />\n  </label>\n</template>\n"],"names":["name","toRef","props","inputValue","handleChange","errorMessage","handleBlur","meta","useField","elementRef","ref","defaultValue","validationListeners","e","onMounted","autosize","onBeforeUnmount"],"mappings":"+xBA4BMA,EAAcC,EAAMC,EAAO,MAAM,EACjC,CAAE,MAAOC,EAAY,aAAAC,EAAc,aAAAC,EAAc,WAAAC,EAAY,KAAAC,CAAA,EAASC,EAASR,EAAME,EAAM,MAAO,CACtG,KAAMA,EAAM,KACZ,aAAcA,EAAM,MACpB,sBAAuB,EAAA,CACxB,EAEKO,EAAcC,IACdC,EAAeD,EAAIR,EAAM,OAAO,EAChCU,EAAsB,CAC1B,KAAMR,EACN,OAAQA,EACR,MAAQS,GAAeT,EAAaS,EAAG,CAAC,CAACR,EAAa,KAAK,CAAA,EAM7D,OAAAS,EAAU,IAAMC,EAASN,EAAW,KAAK,CAAC,EAC1CO,EAAgB,IAAMD,EAAS,QAAQN,EAAW,KAAK,CAAC"}