{"version":3,"file":"PeerMixedSentenceQuestion.js","sources":["../../../../vue-ts-ipeer/src/student/views/questions/PeerMixedSentenceQuestion.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { ref, toRef, reactive, watch, computed, onMounted } from 'vue'\nimport { isEmpty, find } from 'lodash'\nimport { FieldArray } from 'vee-validate'\nimport { validateSentence } from '@/helpers/rules'\nimport CustomInputField from '@/components/fields/CustomInputField.vue'\nimport UserCard from '@/student/components/UserCard.vue'\nimport type {MixedResponse, MixedReviewData, User} from \"@/types/typings\";\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:form', value: object): void\n}>()\nconst props = defineProps<{\n  question: MixedReviewData,\n  members: User[],\n  initialState: MixedResponse,\n}>()\n\n// DATA\nconst members = toRef(props, 'members')\nconst question = toRef(props, 'question')\nconst initialState = toRef(props, 'initialState')\n// COMPUTED\n// METHODS\nfunction getResponseDetails(member_id:string, question_num:string): string {\n  if(initialState.value?.data || !isEmpty(initialState.value?.data)) {\n    const response = find(initialState.value?.data, { evaluatee: member_id })\n    if(response?.details) {\n      const question = find(response.details, { question_number: question_num })\n      return question?.question_comment\n    }\n  }\n  return ''\n}\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <div :class=\"`datatable question_${question.question_num} mx-4`\">\n    <div class=\"question\">{{ question.question_num }}. {{ question.title }} <span class=\"text-red-500\" v-if=\"question.required\">*</span></div>\n    <div class=\"description text-sm text-slate-900 leading-relaxed mx-4 mb-2\">{{ question.instructions }}</div>\n    <table class=\"standardtable leftalignedtable\">\n      <thead>\n      <tr>\n        <th style=\"width: 20%\">\n          <div class=\"text-center leading-4\">\n            <div class=\"font-normal\">Peer</div>\n            <div class=\"text-sm font-thin\"></div>\n          </div>\n        </th>\n        <th style=\"width: 80%;\">\n          <div class=\"text-center leading-4\">\n            <div class=\"font-normal\">Comments</div>\n            <div class=\"text-sm font-thin\"></div>\n          </div>\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"member of members\" :key=\"member.id\">\n        <td><UserCard :member=\"member\" /></td>\n        <td>\n          <!-- TODO:: fire the ['update:initialState'] every 300~500 ms -->\n          <CustomInputField\n            :name=\"`data[${member.id}][EvaluationMixeval][${question.question_num}][question_comment]`\"\n            :value=\"getResponseDetails(member.id, question.question_num)\"\n            :rules=\"question.required ? validateSentence : null\"\n            @input=\"$emit('update:initialState', {\n              member_id: member.id,\n              question_num: question.question_num,\n              event: {\n                key: 'question_comment',\n                value: $event.target.value\n              }\n            })\"\n          />\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n"],"names":["members","toRef","props","question","initialState","getResponseDetails","member_id","question_num","_a","isEmpty","_b","response","find","_c"],"mappings":"qgCAmBMA,EAAUC,EAAMC,EAAO,SAAS,EAChCC,EAAWF,EAAMC,EAAO,UAAU,EAClCE,EAAeH,EAAMC,EAAO,cAAc,EAGvC,SAAAG,EAAmBC,EAAkBC,EAA6B,WACtE,KAAAC,EAAAJ,EAAa,QAAb,YAAAI,EAAoB,OAAQ,CAACC,mBAAQC,EAAAN,EAAa,QAAb,YAAAM,EAAoB,IAAI,EAAG,CAC3D,MAAAC,EAAWC,gBAAKC,EAAAT,EAAa,QAAb,YAAAS,EAAoB,KAAM,CAAE,UAAWP,EAAW,EACxE,GAAGK,GAAA,MAAAA,EAAU,QAAS,CACpB,MAAMR,EAAWS,EAAAA,QAAAA,KAAKD,EAAS,QAAS,CAAE,gBAAiBJ,EAAc,EACzE,OAAOJ,GAAAA,YAAAA,EAAU,gBACnB,CACF,CACO,MAAA,EACT"}