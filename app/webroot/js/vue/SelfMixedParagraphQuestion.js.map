{"version":3,"file":"SelfMixedParagraphQuestion.js","sources":["../../../../vue-ts-ipeer/src/student/views/questions/SelfMixedParagraphQuestion.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { toRef } from 'vue'\nimport { validateParagraph } from '@/helpers/rules'\nimport { CustomTextField } from '@/components/fields'\nimport {find, isEmpty} from \"lodash\";\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:form', option: object): void\n}>()\nconst props = defineProps<{\n  question: object,\n  currentUser: object,\n  initialState: object,\n}>()\n// DATA\nconst question = toRef(props, 'question')\nconst currentUser = toRef(props, 'currentUser')\nconst initialState = toRef(props, 'initialState')\n// COMPUTED\n// METHODS\nfunction getResponseDetails(member_id:string, question_num:string): string {\n  if(initialState.value?.data || !isEmpty(initialState.value?.data)) {\n    const response = find(initialState.value?.data, { evaluatee: member_id })\n    if(response?.details) {\n      const question = find(response.details, { question_number: question_num })\n      return question?.question_comment\n    }\n  }\n  return ''\n}\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <div :class=\"`datatable question_${question.question_num} mx-4`\">\n    <div class=\"question\">{{ question.question_num }}. {{ question.title }} <span class=\"text-red-500\" v-if=\"question.required\">*</span></div>\n    <div class=\"description text-sm text-slate-900 leading-relaxed mx-4 mb-2\">{{ question.instructions }}</div>\n    <div class=\"mx-4\">\n      <!-- TODO:: fire the ['update:initialState'] every 300~500 ms -->\n      <CustomTextField\n        :name=\"`data[${currentUser.id}][EvaluationMixeval][${question.question_num}][question_comment]`\"\n        :value=\"getResponseDetails(currentUser.id, question.question_num)\"\n        :rules=\"question.required ? validateParagraph : null\"\n        @input=\"$emit('update:initialState', {\n          member_id: currentUser.id,\n          question_num: question.question_num,\n          event: {\n            key: 'question_comment',\n            value: $event.target.value\n          }\n        })\"\n      />\n    </div>\n  </div>\n</template>\n"],"names":["question","toRef","props","currentUser","initialState","getResponseDetails","member_id","question_num","_a","isEmpty","_b","response","find","_c"],"mappings":"omBAeMA,EAAWC,EAAMC,EAAO,UAAU,EAClCC,EAAcF,EAAMC,EAAO,aAAa,EACxCE,EAAeH,EAAMC,EAAO,cAAc,EAGvC,SAAAG,EAAmBC,EAAkBC,EAA6B,WACtE,KAAAC,EAAAJ,EAAa,QAAb,YAAAI,EAAoB,OAAQ,CAACC,mBAAQC,EAAAN,EAAa,QAAb,YAAAM,EAAoB,IAAI,EAAG,CAC3D,MAAAC,EAAWC,gBAAKC,EAAAT,EAAa,QAAb,YAAAS,EAAoB,KAAM,CAAE,UAAWP,EAAW,EACxE,GAAGK,GAAA,MAAAA,EAAU,QAAS,CACpB,MAAMX,EAAWY,EAAAA,QAAAA,KAAKD,EAAS,QAAS,CAAE,gBAAiBJ,EAAc,EACzE,OAAOP,GAAAA,YAAAA,EAAU,gBACnB,CACF,CACO,MAAA,EACT"}