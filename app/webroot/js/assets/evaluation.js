import{V as u,u as i,W as n,X as l,h as c,R as m,x as h}from"./main.js";const d=u("evaluation",{state:()=>({loading:!1,error:null,evaluation:null,members:null,autosave:!1}),actions:{async fetchEvaluation(a,o){var r,s,e;i(),this.loading=!0,this.error=null,this.evaluation=null,this.members=null;try{const t=await n.get("/evaluations/makeEvaluation",`${a}/${o}`);switch(t.status){case 200:t.statusText==="OK"?(this.evaluation=await((r=t==null?void 0:t.data)==null?void 0:r.data),this.members=await((e=(s=t==null?void 0:t.data)==null?void 0:s.data)==null?void 0:e.members)):this.error=t.data;break;case 204:this.error={message:"The following content is not available.",status:t.data.status,type:"error"};break;default:break}}catch(t){switch(t.response.status){case 500:this.error={message:t.response.data.message,status:t.response.status,type:"error"};break;case 404:this.error={message:t.message,status:t.status,type:"error"};break;case 201:this.error={message:t.message.data.message,status:t.response.status,type:"error"};break}}finally{await l(1e3),this.loading=!1}},async makeEvaluation(a,o,r){const s=i(),e=c();try{const t=await n.post("/evaluations/makeEvaluation",`${o}/${r}`,a);t.status===200&&t.statusText==="OK"?(s.setNotification(t.data),e.fetchEvents(),await this.router.push({name:"student.events"})):s.setNotification(t.data)}catch(t){s.setNotification({message:t.response.data.message,status:t.response.data.status,type:"error"})}},async editEvaluation(a,o,r){this.autosave=!0;const s=i();try{const e=await n.post("/evaluations/makeEvaluation",`${o}/${r}`,a);e.status===200&&e.statusText,s.setNotification(e.data)}catch(e){s.setNotification({message:e.response.data.message,status:e.response.data.status,type:"error"})}},async autoSaveEvaluation(a,o,r){const s=i();this.autosave=!0;try{const e=await n.post("/evaluations/makeEvaluation",`${o}/${r}`,a);e.status===200&&e.statusText==="OK"&&(this.autosave=!1)}catch(e){s.setNotification({message:e.response.message,status:e.response.status,type:"error"})}finally{this.autosave=!1}}},getters:{hasError(a){return a.error!==null},getGroupMembers(a){if(a.members){const r=m().getCurrentUser;let s=[...a.members];const e=h.exports.findIndex(s,{id:r==null?void 0:r.id});if(e===-1)return a.members;{const t=s.splice(e,1);return[...s,{...t[0],first_name:"Yourself",last_name:""}]}}return a.members}}});export{d as u};
//# sourceMappingURL=evaluation.js.map
