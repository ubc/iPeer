{"version":3,"file":"SimpleEvaluation.js","sources":["../../../vueapp/src/student/views/questions/PeerSimpleRangeQuestion.vue","../../../vueapp/src/student/views/templates/SimpleEvaluation.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport {ref, reactive, watch, computed, onMounted, toRef, onBeforeMount} from 'vue'\nimport { isEmpty, findIndex, forEach, map, reduce } from 'lodash'\nimport UserCard from '@/student/components/UserCard.vue'\nimport AutoSpinner from '@/components/AutoSpinner.vue'\nimport { CustomRangeField } from '@/components/fields'\n\nimport type { ISimpleEvaluation, ISimpleResponse, ISimpleReview, IUser } from '@/types/typings'\ninterface Props {\n  members: IUser[]\n  initialState: ISimpleResponse\n  remaining: number\n  point_per_member: string\n  name: string\n  label?: string\n  question?: string\n  description?: string\n  placeholder?: string\n  disabled?: boolean|false\n}\n// REFERENCES\nconst emit  = defineEmits<{}>()\nconst props = defineProps<Props>();\n// DATA\nconst showScore       = ref(false)\nconst response        = toRef(props, 'initialState')\nconst total_points    = ref(props.remaining ?? props.members.length * props.point_per_member) // 100\nconst student_slider  = ref([])\nconst slider_sum      = ref(0)\nconst student_scores  = ref([])\n// COMPUTED\nfunction calculatedValue(memberIdx: number): number {\n  if(!isEmpty(response.value?.data?.points && response.value?.data?.points[memberIdx])) {\n    return Number((response.value?.data?.points[memberIdx]/props.remaining)*100)\n  } else {\n    return 50\n  }\n}\n// METHODS\nfunction updateStudentSlider(event: {target:string, key:string, value: string}) {\n  const {target, key, value} = event;\n  const oldValue = student_slider.value[key]\n  slider_sum.value += parseInt(value) - oldValue\n  if (slider_sum.value <= 0){\n    student_scores.value = map(student_scores.value, () => total_points.value / student_scores.value.length)\n  } else {\n    student_slider.value[key] = parseInt(value);\n    student_scores.value = map(student_slider.value, (sliderValue) => Math.round(total_points.value * sliderValue / slider_sum.value))\n  }\n  distributeDecimalRemainder()\n  response.value.data.points = student_scores.value\n}\n// LIFECYCLE\nonBeforeMount(() => {\n  const initialPoints: number[] | undefined = response.value?.data?.points\n  if (initialPoints?.length) {\n    student_scores.value = [...initialPoints]\n    student_slider.value = map(initialPoints, (val, index) => {\n      const studentScoreValue = parseInt(val)\n      const studentPercentValue = studentScoreValue / total_points.value\n      const defaultStudentSliderValue = 100 * studentPercentValue\n      slider_sum.value += defaultStudentSliderValue;\n      return defaultStudentSliderValue\n    })\n  } else {\n    const defaultStudentSliderValue = Math.round(total_points.value / props.members.length)\n    student_slider.value = map(props.members, () => defaultStudentSliderValue)\n    slider_sum.value = defaultStudentSliderValue * props.members?.length\n    student_scores.value = map(props.members, () => total_points.value / props.members.length)\n  }\n})\n// WATCH\nfunction distributeDecimalRemainder() {\n  const studentScoreSum = reduce(student_scores.value, (acc, val) => acc += val, 0);\n  const remainder = total_points.value - studentScoreSum\n  const lowestScore = remainder > 0 ? Math.min(...student_scores.value) : Math.max(...student_scores.value)\n  const memberIdx = findIndex(student_scores.value, (val) => val === lowestScore)\n  student_scores.value[memberIdx] += remainder\n}\n</script>\n\n<template>\n  <div class=\"datatable\">\n    <div v-if=\"props.question\" class=\"question relative\">{{ props.question }} <AutoSpinner /></div>\n    <div v-if=\"props.description\" class=\"description\">{{ props.description }}</div>\n\n    <table class=\"standardtable center no-v-line\">\n      <thead>\n      <tr>\n        <th style=\"width: 20%\">\n          <div class=\"flex flex-col\">\n            <div class=\"\">Peer</div>\n            <small class=\"small\"></small>\n          </div>\n        </th>\n        <th style=\"width: 80%\">\n          <div class=\"flex flex-col\">\n            <div class=\"\">Relative C<span  @click=\"showScore = !showScore\">o</span>ntribution</div>\n            <small class=\"small\"></small>\n          </div>\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"(member, memberIdx) of props.members\" :key=\"member.id\">\n        <td style=\"width: 20%\"><UserCard :member=\"member\" /></td>\n        <td style=\"width: 80%\">\n          <input type=\"hidden\" :name=\"`${name}[${memberIdx}]`\" :value=\"response?.data && response?.data[name] ? response?.data[name][memberIdx] : ''\" />\n          <CustomRangeField\n              :ticks=\"2\"\n              :max=\"100\"\n              :text=\"['Less', 'More']\"\n              :label=\"'An average amount'\"\n              :name=\"`percent[${memberIdx}]`\"\n              :value=\"calculatedValue(memberIdx)\"\n              :response=\"response?.data?.points\"\n              :points=\"response?.data && response?.data?.points ? response?.data?.points[memberIdx] : ''\"\n              :placeholder=\"placeholder\"\n              :disabled=\"props.disabled\"\n              :remaining=\"props.remaining\"\n              :point_per_member=\"props.point_per_member\"\n              @update:input=\"updateStudentSlider({target:name, key:memberIdx, value: $event.target.value})\"\n          />\n          <div v-if=\"showScore\" class=\"text-xs text-red-400\">{{ response?.data && response?.data?.points ? response?.data?.points[memberIdx] : '' }}</div>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>","<script lang=\"ts\" setup>\nimport { ref, unref, toRef, reactive, watch, computed, onBeforeMount } from 'vue';\nimport { useRoute, useRouter } from 'vue-router'\nimport { isEmpty, map } from 'lodash'\n\nimport TakeNote from '@/student/components/TakeNote.vue'\nimport EvaluationForm from '@/student/views/EvaluationForm.vue'\nimport PeerSimpleRangeQuestion from '@/student/views/questions/PeerSimpleRangeQuestion.vue'\nimport PeerSimpleCommentQuestion from '@/student/views/questions/PeerSimpleCommentQuestion.vue'\nimport { CustomHiddenField } from '@/components/fields'\n\nimport type { IUser, IEvaluation, ISimpleEvaluation, ISimpleEvaluationData, ISimpleResponse, ISimpleResponseData } from '@/types/typings'\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'fetch:evaluation'): void\n}>()\nconst props = defineProps<{\n  members: IUser[]\n  currentUser: IUser\n  evaluation: IEvaluation\n  isDisabled: boolean\n}>()\nconst route = useRoute()\nconst router = useRouter()\n// DATA\nconst evaluation_form   = ref()\nconst members           = toRef(props, 'members')\nconst evaluation        = toRef(props, 'evaluation')\nconst form              = reactive({\n  event_id: computed(() => evaluation.value?.id),\n  group_id: computed(() => evaluation.value?.group?.id),\n  course_id: computed(() => evaluation.value?.course?.id),\n  group_event_id: computed(() => evaluation.value?.group_event_id),\n  rubric_id: computed(() => evaluation.value?.rubric_id),\n  user_id: computed(() => props.currentUser?.id),\n  evaluatee_count: computed(() => members.value?.length),\n  member_ids: computed<string[]|any>(() => map(members.value, member => member.id))\n})\nconst initialState      = ref<ISimpleResponse|any>({})\nfunction getInitialState() {\n  return {\n    id: '',\n    submitter_id: props.currentUser?.id,\n    submitted: null,\n    date_submitted: '',\n    data: {\n      points: [],\n      comments: []\n    }\n  }\n}\n// points: [map(members.value, (member) => evaluation.value?.simple?.point_per_member)],\nfunction setInitialState() {}\nconst questions = reactive({\n  points: {\n    title: '1. Please rate each peer\\'s relative contribution.',\n    description: ''\n  },\n  comments: {\n    title: '2. Please provide overall comments about each peer.',\n    description: ''\n  }\n})\n// COMPUTED\n// METHODS\n// WATCH\n// LIFECYCLE\nonBeforeMount(() => {\n  const currentState = getInitialState()\n  if(evaluation.value?.response && !isEmpty(evaluation.value?.response)) {\n    initialState.value = Object.assign(currentState, unref(evaluation.value?.response))\n  } else {\n    initialState.value = currentState\n  }\n})\n</script>\n\n<template>\n  <EvaluationForm\n      @submit=\"onSubmit\"\n      :initial-state=\"initialState\"\n      :evaluation=\"evaluation\"\n      v-slot=\"{ onSave, errors, values, isSubmitting, evaluationRef, message }\"\n      @set:message=\"$emit('set:message', message)\"\n  >\n    <slot name=\"header\">\n      <CustomHiddenField type=\"hidden\" name=\"event_id\" :value=\"evaluation?.id\" />\n      <CustomHiddenField type=\"hidden\" name=\"group_id\" :value=\"evaluation?.group?.id\" />\n      <CustomHiddenField type=\"hidden\" name=\"course_id\" :value=\"evaluation?.course?.id\" />\n      <CustomHiddenField type=\"hidden\" name=\"data[Evaluation][evaluator_id]\" :value=\"currentUser?.id\" />\n      <CustomHiddenField type=\"hidden\" name=\"evaluateeCount\" :value=\"members?.length\" />\n      <CustomHiddenField type=\"hidden\" name=\"memberIDs[]\" v-for=\"(m,i) of form?.member_ids\" :key=\"i\" :value=\"m\" />\n    </slot>\n\n    <slot name=\"main\">\n      <PeerSimpleRangeQuestion\n          :members=\"members\"\n          :remaining=\"evaluation?.simple?.remaining\"\n          :point_per_member=\"evaluation?.simple?.point_per_member\"\n          :initialState=\"initialState\"\n          :name=\"`points`\"\n          :question=\"questions.points.title\"\n          :description=\"questions.points.description\"\n          :disabled=\"isDisabled\"\n      />\n      <PeerSimpleCommentQuestion\n          :members=\"members\"\n          :initialState=\"initialState\"\n          :name=\"'comments'\"\n          :question=\"questions.comments.title\"\n          :description=\"questions.comments.description\"\n          :disabled=\"isDisabled\"\n      />\n    </slot>\n\n    <slot name=\"footer\"></slot>\n\n    <slot name=\"cta\" :on-save=\"onSave\" :is-submitting=\"isSubmitting\" :values=\"values\"></slot>\n\n  </EvaluationForm>\n</template>\n\n<style lang=\"scss\">\n.notification {\n  &.success {\n    @apply text-green-600;\n  }\n  &.danger {\n    @apply text-red-600;\n  }\n}\n</style>"],"names":["showScore","ref","response","toRef","props","total_points","_a","student_slider","slider_sum","student_scores","calculatedValue","memberIdx","isEmpty","_b","_d","_c","_f","_e","updateStudentSlider","event","target","key","value","oldValue","map","sliderValue","distributeDecimalRemainder","onBeforeMount","initialPoints","val","index","studentPercentValue","defaultStudentSliderValue","studentScoreSum","reduce","acc","remainder","lowestScore","findIndex","useRoute","useRouter","members","evaluation","form","reactive","computed","member","initialState","getInitialState","questions","currentState","unref"],"mappings":"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"}