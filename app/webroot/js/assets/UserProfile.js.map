{"version":3,"file":"UserProfile.js","sources":["../../../vueapp/src/components/icons/IconKey.vue","../../../vueapp/src/components/icons/IconUser.vue","../../../vueapp/src/student/views/UserForm.vue","../../../vueapp/src/student/views/UserProfile.vue"],"sourcesContent":["<template>\n  <svg id=\"emoji\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g id=\"line\">\n      <polyline fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" points=\"30.735,34.6557 14.3026,50.6814 14.3026,57.9214 21.868,57.9214 21.868,53.2845 26.9929,53.2845 26.9929,47.4274 32.0913,47.4274 34.4957,45.023 34.4957,40.6647 36.5107,40.6647\"/>\n      <circle cx=\"48.5201\" cy=\"23.9982\" r=\"3.9521\" fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\"/>\n      <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" d=\"M34.2256,31.1781c-1.4298-4.2383-0.3466-9.2209,3.1804-12.6947c4.8446-4.7715,12.4654-4.8894,17.0216-0.2634 s4.3223,12.2441-0.5223,17.0156c-3.9169,3.8577-9.6484,4.6736-14.1079,2.3998\"/>\n    </g>\n  </svg>\n</template>","<template>\n  <svg id=\"emoji\" viewBox=\"0 0 72 72\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g id=\"line\">\n      <path fill=\"none\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M58,60c0,0,0-2-1-6 c-1.2109-4.8457-4-8-10-8c-5,0-15,0-22,0c-6,0-8.7891,3.1543-10,8c-1,4-1,6-1,6\"/>\n      <path fill=\"none\" stroke=\"#000000\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M26,26c0,3.7246,0.5391,7.8086,2,10 c1.8613,2.793,5.0176,4,8,4c3.0957,0,6.1367-1.207,8-4c1.46-2.1914,2-6.2754,2-10c0-2.7935-1-12-10-12S26,21.3442,26,26z\"/>\n    </g>\n  </svg>\n</template>","<script lang=\"ts\" setup>\nimport {ref, toRef, watch} from 'vue'\nimport {useRouter} from 'vue-router'\nimport { useForm } from 'vee-validate'\nimport api from '@/services/api'\nimport type {IUser} from '@/types/typings'\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'set:message', option: object): void\n  (e: 'update:profile', option: object): void\n}>()\nconst props = defineProps<{\n  initialState: IUser\n}>()\n// DATA\nconst form    = toRef(props, 'initialState')\nconst userRef = ref(null)\nconst message = ref<object|null>(null)\n// COMPUTED\nconst { values, errors, meta, handleSubmit, isSubmitting } = useForm({\n  initialValues: form.value,\n})\n// METHODS\nfunction onInvalidateSubmit({ values, errors, results }: any) {\n  const fieldName = Object.keys(errors)[0]\n  const fieldElement = document.getElementById(fieldName)\n  fieldElement?.focus?.()\n  fieldElement?.scrollIntoView({ behavior: 'smooth' })\n}\nconst onSubmit = handleSubmit(async (values) => {\n  const profileSearchParams: any = new URLSearchParams()\n  for (const pair of Object.entries(values)) {\n    profileSearchParams.append(pair[0], pair[1])\n  }\n  try {\n    const response = await api.post('/users/editProfile', props.initialState?.id, profileSearchParams)\n    if(response.status === 200 && response.statusText === 'OK') {\n      message.value = response.data\n      const user = await api.get('/users/editProfile', props.initialState?.id)\n      await emit('update:profile', user.data)\n    } else {\n      // message.value = response.data\n      // No response data available for this request\n      await useRouter().push({ name: 'user.login' })\n    }\n  } catch (err: any) {\n    message.value = {text: err.response.statusText, status: err.response.status, type: 'error'}\n  }\n}, onInvalidateSubmit)\n// WATCH\nwatch(message, (event: object) => {\n  emit('set:message', event)\n}, { deep: true })\n// LIFECYCLE\n</script>\n\n<template>\n  <form novalidate @submit.prevent=\"onSubmit\" id=\"user_form\" class=\"user-form\" ref=\"user_form\">\n    <slot :values=\"values\" :errors=\"errors\" :meta=\"meta\" :isSubmitting=\"isSubmitting\" :message=\"message\" />\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { ref, toRefs } from 'vue'\nimport UserForm from '@/student/views/UserForm.vue'\nimport PageHeading from '@/components/PageHeading.vue'\nimport SectionTitle from '@/components/SectionTitle.vue'\nimport SectionSubtitle from '@/components/SectionSubtitle.vue'\nimport { IconUser, IconKey, IconSpinner } from '@/components/icons'\nimport { CustomHiddenField, CustomInputField } from '@/components/fields'\nimport {\n  validateProfileTextInput,\n  validateProfileEmailInput,\n  validateProfileOldPasswordInput,\n  validateProfileNewPasswordInput,\n  validateProfileConfirmPasswordInput,\n} from '@/helpers/rules'\n\nimport type { IUser, IPageHeading } from '@/types/typings'\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'set:message', option: object): void\n  (e: 'update:profile', option: object): void\n}>()\nconst props = defineProps<{\n  currentUser: IUser\n  settings?: IPageHeading\n}>()\n// DATA\nconst error         = ref([])\nconst loading       = ref(false)\n</script>\n\n<template>\n  <PageHeading v-if=\"props.settings\" :settings=\"props.settings\" />\n\n  <UserForm v-if=\"props.currentUser\"\n      :initial-state=\"props.currentUser\"\n      v-slot=\"{ values, errors, meta, isSubmitting, message }\"\n      @set:message=\"$emit('set:message', $event)\"\n      @update:profile=\"$emit('update:profile', $event)\"\n  >\n    <CustomInputField type=\"hidden\" name=\"_method\" value=\"PUT\" />\n    <div class=\"form-section\">\n      <SectionTitle title=\"Your Account\" class=\"mt-8\" />\n      <SectionSubtitle subtitle=\"Update your iPeer profile\" :icon=\"{src: IconUser, size: '3.5rem'}\">\n        <p class=\"text-sm leading-relaxed text-slate-900 mx-4\">Your first name and last name are shown to peers when they review you but not when they read reviews from you. No one other than your instructor and teaching assistants will know what you share about peers in iPeer.</p>\n      </SectionSubtitle>\n      <div class=\"your-account mt-6 mb-4 md:space-y-5\">\n        <CustomInputField\n            class=\"profile\"\n            label=\"Username\"\n            name=\"data[User][username]\"\n            :value=\"values?.username\"\n            :rules=\"validateProfileTextInput.label('Username')\"\n            :disabled=\"true\"\n            readonly=\"readonly\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            label=\"First name\"\n            name=\"data[User][first_name]\"\n            :value=\"values?.first_name\"\n            :rules=\"validateProfileTextInput.label('First name')\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            label=\"Last name\"\n            name=\"data[User][last_name]\"\n            :value=\"values?.last_name\"\n            :rules=\"validateProfileTextInput.label('Last name')\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            label=\"Email\"\n            name=\"data[User][email]\"\n            :value=\"values?.email\"\n            :rules=\"validateProfileEmailInput.label('Email')\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            label=\"Student number\"\n            name=\"data[User][student_no]\"\n            :value=\"values?.student_no\"\n            :rules=\"validateProfileTextInput.label('Student number')\"\n            :disabled=\"true\"\n            readonly=\"readonly\"\n        />\n      </div>\n    </div>\n    <div class=\"form-section\">\n      <SectionTitle title=\"Your Password\" />\n      <SectionSubtitle subtitle=\"Change your iPeer password\" :icon=\"{src: IconKey, size: '3.5rem'}\">\n        <p class=\"text-sm leading-relaxed text-slate-900 mx-4\">Enter this information if you'd like to change your password. You can save updates to your account without changing your password.</p>\n      </SectionSubtitle>\n      <div class=\"your-password mt-6 mb-4 md:space-y-5\">\n        <CustomInputField\n            type=\"password\"\n            class=\"profile\"\n            label=\"Old password\"\n            name=\"data[User][old_password]\"\n            :value=\"values?.old_password\"\n            :rules=\"validateProfileOldPasswordInput.label('Old password')\"\n            :autocomplete=\"false\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            type=\"password\"\n            name=\"data[User][temp_password]\"\n            label=\"New password\"\n            :value=\"values?.temp_password\"\n            :rules=\"validateProfileNewPasswordInput.label('New password')\"\n            :autocomplete=\"false\"\n        />\n        <CustomInputField\n            class=\"profile\"\n            type=\"password\"\n            name=\"data[User][confirm_password]\"\n            label=\"Confirm new password\"\n            :value=\"values?.confirm_password\"\n            :rules=\"validateProfileConfirmPasswordInput.label('Confirm password')\"\n            :autocomplete=\"false\"\n        />\n      </div>\n    </div>\n    <div class=\"form-action cta\">\n      <button\n          type=\"submit\"\n          class=\"button submit btn-lg flex items-center space-x-2\"\n          :disabled=\"!meta.valid === meta.touched || isSubmitting\">\n        <IconSpinner class=\"w-4 h-4\" v-if=\"isSubmitting\" /> Save\n      </button>\n    </div>\n  </UserForm>\n</template>\n"],"names":["_hoisted_1","_createElementVNode","_hoisted_3","_sfc_render","_ctx","_cache","form","toRef","props","ref","message","values","errors","meta","handleSubmit","isSubmitting","useForm","onInvalidateSubmit","results","fieldName","fieldElement","_a","onSubmit","profileSearchParams","pair","response","api","user","_b","emit","useRouter","err","watch","event"],"mappings":"slBACUA,EAAO,CAAC,GAAA,QAAoB,QAAkC,kDAEkPC,EAAA,IAAA,CAAA,GAAA,MAAA,EAAA,CAA/RA,EAAA,WAAA,CAAC,KAAM,OAAW,OAAA,UAAuB,yBAAwB,kBAAiB,QAAM,oBAAgB,KAAC,eAAoL,2LAC9RA,EAAA,SAAA,CAAC,GAAG,UAAU,GAAU,UAAC,EAAA,SAAY,KAAM,OAAW,OAAA,UAAuB,yBAAwB,kBAAiB,QAAM,oBAAgB,0BAC/IA,EAAA,OAAA,CAAC,KAAM,OAAW,OAAA,UAAuB,yBAAwB,kBAAiB,QAAM,oBAAgB,KAAC,eAAuL,mMAC/SC,EAAA,IALN,SAAAC,EAAAC,EAAAC,EAAA,2DCAQL,GAAO,CAAC,GAAA,QAAoB,QAAkC,mDAEsIC,EAAA,IAAA,CAAA,GAAA,MAAA,EAAA,CAAvLA,EAAA,OAAA,CAAC,KAAM,OAAW,OAAA,UAAuB,yBAAwB,kBAAgB,QAAC,eAAmG,0GACrLA,EAAA,OAAA,CAAC,KAAM,OAAW,OAAA,UAAwB,kBAAgB,QAAC,eAA2J,uKACrOC,GAAA,KAJN,SAAAC,GAAAC,EAAAC,EAAA,+KCcIC,EAAUC,EAAMC,EAAO,cAAc,EAC3BC,EAAI,IAAI,EAClB,MAAAC,EAAUD,EAAiB,IAAI,EAE/B,CAAE,OAAAE,EAAQ,OAAAC,EAAQ,KAAAC,EAAM,aAAAC,EAAc,aAAAC,GAAiBC,EAAQ,CACnE,cAAeV,EAAK,KAAA,CACrB,EAED,SAASW,EAAmB,CAAE,OAAAN,EAAQ,OAAAC,EAAQ,QAAAM,GAAgB,OAC5D,MAAMC,EAAY,OAAO,KAAKP,CAAM,EAAE,GAChCQ,EAAe,SAAS,eAAeD,CAAS,GACtDE,EAAAD,GAAA,YAAAA,EAAc,QAAd,MAAAC,EAAA,KAAAD,GACAA,GAAA,MAAAA,EAAc,eAAe,CAAE,SAAU,QAAU,EACrD,CACM,MAAAE,EAAWR,EAAa,MAAOH,GAAW,SACxC,MAAAY,EAA2B,IAAI,gBACrC,UAAWC,KAAQ,OAAO,QAAQb,CAAM,EACtCY,EAAoB,OAAOC,EAAK,GAAIA,EAAK,EAAE,EAEzC,GAAA,CACI,MAAAC,EAAW,MAAMC,EAAI,KAAK,sBAAsBL,EAAAb,EAAM,eAAN,YAAAa,EAAoB,GAAIE,CAAmB,EACjG,GAAGE,EAAS,SAAW,KAAOA,EAAS,aAAe,KAAM,CAC1Df,EAAQ,MAAQe,EAAS,KACzB,MAAME,EAAO,MAAMD,EAAI,IAAI,sBAAsBE,EAAApB,EAAM,eAAN,YAAAoB,EAAoB,EAAE,EACjE,MAAAC,EAAK,iBAAkBF,EAAK,IAAI,CAAA,MAItC,MAAMG,EAAY,EAAA,KAAK,CAAE,KAAM,YAAc,CAAA,QAExCC,GACCrB,EAAA,MAAQ,CAAC,KAAMqB,EAAI,SAAS,WAAY,OAAQA,EAAI,SAAS,OAAQ,KAAM,OAAO,CAC5F,GACCd,CAAkB,EAEf,OAAAe,EAAAtB,EAAUuB,GAAkB,CAChCJ,EAAK,cAAeI,CAAK,CAAA,EACxB,CAAE,KAAM,EAAA,CAAM,2iCCzBK,OAAAxB,EAAI,CAAA,CAAE,EACNA,EAAI,EAAK"}