{"version":3,"file":"reviews.js","sources":["../../../vueapp/src/stores/reviews.ts"],"sourcesContent":["import { defineStore, acceptHMRUpdate } from 'pinia'\nimport type { StoreDefinition } from 'pinia'\nimport {findIndex} from \"lodash\";\nimport {useStore} from \"@/stores/main\";\nimport {useAuthStore} from \"@/stores/auth\";\nimport api from \"@/services/api\";\nimport {sleep} from \"@/helpers\";\n\nimport type { IReview, IUser } from '@/types/typings'\n\nexport const useReviewsStore = defineStore('reviews', {\n  state: () => ({\n    loading: false,\n    error: null as object|null,\n    reviews: null as IReview|null,\n    members: null as IUser[]|null\n  }),\n\n  actions: {\n    async fetchReviews(eventId: string, groupId: string): Promise<void> {\n      // TBD:: Check if reviews with event.id/group.id exists\n      const store = useStore()\n      this.loading = true\n      this.error = null\n      this.reviews = null\n      this.members = null\n\n      try {\n        const response = await api.get('/evaluations/studentViewEvaluationResult', `${eventId}/${groupId}`)\n        switch (response.status) {\n          case 200:\n            if(response.statusText === 'OK') {\n              this.reviews = await response?.data?.data\n              this.members = await response?.data?.data?.members\n            } else {\n              this.error = { message: response.data.message, status: response.status, type: 'error'}\n            }\n            break\n          case 202:\n            this.error = response.data\n            /**\n            this.error = {\n              title: 'No Content',\n              message: 'The following content is not available.',\n              status: response.status,\n              type: 'error'\n            }*/\n            break\n          default:\n            break\n        }\n      }\n      catch (err: any) {\n        if(err.response.status === 500) {\n          // Internal Server Error\n          this.error = {\n            status: err.response.status,\n            text: err.response.data.message,\n            code: err.code,\n            message: err.message,\n            type: 'error'\n          }\n        }\n        else if(err.response.status === 404) {\n          // Not Found\n          this.error = {\n            status: err.status,\n            message: err.message,\n            type: 'error'\n          }\n          // @ts-ignore\n          // await this.router.push({ name: 'not.found' })\n        }\n        else if(err.response.status === 204) {\n          // No Content\n          this.error = {\n            status: err.response.status,\n            text: err.response.data.message,\n            code: err.code,\n            message: err.message,\n            type: 'error'\n          }\n        }\n        // this.error = {status: err.status, code: err.code, message: err.message, type: 'error'}\n        // store.setNotification({ text: err.data.response.message, status: err.data.response.status, type: err.data.response.statusText })\n      }\n      finally {\n        await sleep(1000)\n        this.loading = false\n      }\n    }\n  },\n\n  getters: {\n    hasError(state) {\n      if(state.error === null) {\n        return false\n      } else {\n        return true\n      }\n    },\n    getGroupMembers(state) { // check if members includes the currentUser\n      // @ts-ignore\n      if(state.members?.length>0) {\n        const auth = useAuthStore()\n        const user = auth.getCurrentUser\n        // @ts-ignore\n        let tmp = [...state.members]\n        // @ts-ignore\n        const index = findIndex(tmp, { id: user?.id })\n        if (index !== -1) {\n          const spliced = tmp.splice(index, 1)\n          // @ts-ignore\n          return [...tmp, {...spliced[0], first_name: 'Yourself', last_name: ''}]\n        } else {\n          return state.members\n        }\n      } else {\n        return state.members\n      }\n    },\n  }\n\n})\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useReviewsStore, import.meta.hot))\n}\n"],"names":["useReviewsStore","defineStore","eventId","groupId","useStore","response","api","_a","_c","_b","err","sleep","state","user","useAuthStore","tmp","index","findIndex","spliced"],"mappings":"iEAUa,MAAAA,EAAkBC,EAAY,UAAW,CACpD,MAAO,KAAO,CACZ,QAAS,GACT,MAAO,KACP,QAAS,KACT,QAAS,IAAA,GAGX,QAAS,CACP,MAAM,aAAaC,EAAiBC,EAAgC,WAEpDC,EAAS,EACvB,KAAK,QAAU,GACf,KAAK,MAAQ,KACb,KAAK,QAAU,KACf,KAAK,QAAU,KAEX,GAAA,CACF,MAAMC,EAAW,MAAMC,EAAI,IAAI,2CAA4C,GAAGJ,KAAWC,GAAS,EAClG,OAAQE,EAAS,OAAQ,CACvB,IAAK,KACAA,EAAS,aAAe,MACpB,KAAA,QAAU,OAAME,EAAAF,GAAA,YAAAA,EAAU,OAAV,YAAAE,EAAgB,MACrC,KAAK,QAAU,OAAMC,GAAAC,EAAAJ,GAAA,YAAAA,EAAU,OAAV,YAAAI,EAAgB,OAAhB,YAAAD,EAAsB,UAEtC,KAAA,MAAQ,CAAE,QAASH,EAAS,KAAK,QAAS,OAAQA,EAAS,OAAQ,KAAM,OAAO,EAEvF,MACF,IAAK,KACH,KAAK,MAAQA,EAAS,KAQtB,MACF,QACE,KACJ,QAEKK,GACFA,EAAI,SAAS,SAAW,IAEzB,KAAK,MAAQ,CACX,OAAQA,EAAI,SAAS,OACrB,KAAMA,EAAI,SAAS,KAAK,QACxB,KAAMA,EAAI,KACV,QAASA,EAAI,QACb,KAAM,OAAA,EAGFA,EAAI,SAAS,SAAW,IAE9B,KAAK,MAAQ,CACX,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,KAAM,OAAA,EAKFA,EAAI,SAAS,SAAW,MAE9B,KAAK,MAAQ,CACX,OAAQA,EAAI,SAAS,OACrB,KAAMA,EAAI,SAAS,KAAK,QACxB,KAAMA,EAAI,KACV,QAASA,EAAI,QACb,KAAM,OAAA,EAEV,QAIF,CACE,MAAMC,EAAM,GAAI,EAChB,KAAK,QAAU,EACjB,CACF,CACF,EAEA,QAAS,CACP,SAASC,EAAO,CACX,OAAAA,EAAM,QAAU,IAKrB,EACA,gBAAgBA,EAAO,OAElB,KAAAL,EAAAK,EAAM,UAAN,YAAAL,EAAe,QAAO,EAAG,CAE1B,MAAMM,EADOC,IACK,eAElB,IAAIC,EAAM,CAAC,GAAGH,EAAM,OAAO,EAE3B,MAAMI,EAAQC,EAAAA,QAAAA,UAAUF,EAAK,CAAE,GAAIF,GAAA,YAAAA,EAAM,GAAI,EAC7C,GAAIG,IAAU,GAAI,CAChB,MAAME,EAAUH,EAAI,OAAOC,EAAO,CAAC,EAE5B,MAAA,CAAC,GAAGD,EAAK,CAAC,GAAGG,EAAQ,GAAI,WAAY,WAAY,UAAW,EAAG,CAAA,CAAA,KAEtE,QAAON,EAAM,OACf,KAEA,QAAOA,EAAM,OAEjB,CACF,CAEF,CAAC"}