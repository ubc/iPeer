{"version":3,"file":"CustomRangeField.vue_vue_type_script_setup_true_lang.js","sources":["../../../vueapp/src/components/fields/CustomRangeField.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport {computed, toRefs} from 'vue';\nimport { useField } from 'vee-validate'\n\nexport interface Props {\n  ticks: number\n  label?: string\n  name: string\n  value: string\n  response?: object\n  points?: string | number\n  rules?: string\n  disabled?: boolean\n  placeholder?: string\n  min?: string | number\n  step?: string | number\n  max?: string | number\n  text?: string[]\n  remaining?: number\n  point_per_member?: string\n}\n\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'update:input', option: object): void\n}>()\nconst props = withDefaults(defineProps<Props>(), {\n  ticks: 0,\n  min: 0,\n  step: 1,\n  max: 100,\n  text: () => ['min', 'max'],\n  placeholder: '',\n  disabled: false\n})\n\nconst { name, value } = toRefs(props);\nconst { value: inputValue, errorMessage, handleBlur, handleChange, meta } = useField(name, props.rules, {\n  initialValue: props.value,\n  validateOnValueUpdate: true\n});\n// DATA\nconst validationListeners = {\n  blur: handleChange,\n  change: handleChange,\n  input: (e: unknown) => handleChange(e, !!errorMessage.value)\n}\n// COMPUTED\n// METHODS\n// WATCH\n// LIFECYCLE\n</script>\n\n<template>\n  <div class=\"block block-slider bg-white dark:gray-600\" :class=\"{ 'has-error': !!errorMessage, success: meta.valid }\">\n    <label class=\"form-range form-range-inline flex flex-col -mb-4\">\n      <span class=\"form-range-label pb-2\">{{ props.label }}</span>\n      <span v-for=\"(_,i) of props.ticks\" :key=\"i\" class=\"tick\" :style=\"{transform: 'translateX('+(i+1)*15+'%)'}\"></span>\n      <span class=\"tick\"></span>\n      <span v-for=\"(_,i) of props.ticks\" :key=\"i\" class=\"tick\" :style=\"{transform: 'translateX(-'+(i+1)*15+'%)'}\"></span>\n      <input class=\"form-range input range-sm thin range\" type=\"range\"\n               :min=\"props.min\" :step=\"props.step\" :max=\"props.max\"\n               :name=\"name\"\n               :value=\"inputValue\"\n               :disabled=\"disabled\"\n               v-on=\"validationListeners\"\n               @input=\"$emit('update:input', $event)\"\n               @blur=\"handleBlur\"\n        />\n    </label>\n    <div v-if=\"props.text\" class=\"flex justify-between items-center\">\n      <div v-if=\"props.text[0]\" class=\"min\">{{ props.text[0] }}</div>\n      <div v-if=\"props.text[1]\" class=\"max\">{{ props.text[1] }}</div>\n    </div>\n  </div>\n</template>\n"],"names":["name","value","toRefs","props","inputValue","errorMessage","handleBlur","handleChange","meta","useField","validationListeners","e"],"mappings":"gwBAoCM,CAAE,KAAAA,EAAM,MAAAC,CAAM,EAAIC,EAAOC,CAAK,EAC9B,CAAE,MAAOC,EAAY,aAAAC,EAAc,WAAAC,EAAY,aAAAC,EAAc,KAAAC,CAAA,EAASC,EAAST,EAAMG,EAAM,MAAO,CACtG,aAAcA,EAAM,MACpB,sBAAuB,EAAA,CACxB,EAEKO,EAAsB,CAC1B,KAAMH,EACN,OAAQA,EACR,MAAQI,GAAeJ,EAAaI,EAAG,CAAC,CAACN,EAAa,KAAK,CAAA"}