{"version":3,"file":"InputElement.js","sources":["../../../../vue-ts-ipeer/src/student/views/EvaluationForm.vue","../../../../vue-ts-ipeer/src/components/fields/InputElement.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport {ref, reactive, watch, computed, onMounted, defineAsyncComponent, toRef} from 'vue';\n// import { useForm } from 'vee-validate'\nimport { map } from 'lodash'\nimport useFetch from '@/composables/useFetch'\n//\nimport Debugger from '@/components/Debugger.vue'\n//\nimport type {Evaluation, User} from '@/types/typings'\nimport swal from \"sweetalert\";\n// REFERENCES\nconst emit = defineEmits<{\n  (e: 'on:save', option: () => {}): void\n  // (e: 'updateModelValue', option: string): void\n}>()\nconst props = defineProps<{\n  form: object\n  evaluation: Evaluation\n  currentUser: User\n}>()\n\n// DATA\n\n// COMPUTED\n\n// METHODS\n// function onInvalidSubmit({ values, errors, results }: any) {\n//   console.log(values); // current form values\n//   console.log(errors); // a map of field names and their first error message\n//   console.log(results); // a detailed map of field names and their validation results\n// }\n// const { handleSubmit } = useForm({\n//   // initialValues: props.evaluation?.review?.response || { points: [], comments: [] }\n//   initialValues: props.form || { points: [], comments: [] }\n// });\n\n/**\nconst onSubmit2 = handleSubmit(async (values) => {\n  // const formData = new FormData(values)\n  alert(JSON.stringify(values, null, 2));\n\n  // const profileSearchParams: any = new URLSearchParams()\n  // for (const pair of Object.entries(values)) {\n  //   profileSearchParams.append(pair[0], pair[1])\n  // }\n  // `${import.meta.env.VITE_BASE_URL}/users/editProfile/${currentUser.value?.id}`,\n  try {\n    const response = await useFetch(\n        `${import.meta.env.VITE_BASE_URL}/evaluations/makeEvaluation/${props.evaluation?.id}/${props.evaluation?.group?.id}`,\n        {\n          method: 'POST',\n          timeout: 300,\n          body: JSON.stringify(values)\n        }\n    )\n    await swal({text: response.message, icon: response.statusText})\n\n  } catch (err) {\n    await swal({text: err.message, icon: err.statusText})\n  }\n\n}, onInvalidSubmit);\n*/\nasync function onSubmit(e: HTMLFormElement | any) {\n  e.preventDefault()\n  // NOTE::Collect formData\n  const formData = new FormData(e.target)\n  formData.append('action', 'Submit')\n  // NOTE::\n  const searchParams = new URLSearchParams()\n  // NOTE::Iterating the search parameters\n  for (const pair of formData) {\n    searchParams.append(pair[0], pair[1])\n  }\n\n  try {\n    const response = await useFetch(\n        `${import.meta.env.VITE_BASE_URL}/evaluations/makeEvaluation/${props.evaluation?.id}/${props.evaluation?.group?.id}`,\n        {\n          method: 'POST',\n          timeout: 300,\n          body: searchParams\n        }\n    )\n    await swal({text: response.message, icon: response.statusText})\n\n  } catch (err) {\n    await swal({text: err.message, icon: err.statusText})\n  }\n}\n\n\n/**\nconst onSave = handleSubmit(values => {\n  alert(JSON.stringify(values, null, 2));\n  const formRef = document.getElementById('evaluation_form');\n  const formData = new FormData(formRef)\n  formData.append('_method', 'PUT')\n  formData.append('action', 'Save')\n  // NOTE::\n  const searchParams = new URLSearchParams()\n  // NOTE::Iterating the search parameters\n  for (const pair of formData) {\n    searchParams.append(pair[0], pair[1])\n  }\n  alert(JSON.stringify(searchParams, null, 2));\n  //useFetch('POST', `/evaluations/makeEvaluation/${props.form.event_id}/${props.form.group_id}`, searchParams)\n})\n*/\n// WATCH\n\n// LIFECYCLE\n\n</script>\n\n<template>\n  <Debugger :title=\"`EvaluationForm::${props.evaluation?.template}`\" :state=\"props.currentUser\" :form=\"props.form\" :data=\"{}\" />\n  <form @submit.prevent=\"onSubmit\" class=\"evaluation-form\">\n    <slot name=\"header\"></slot>\n    <slot name=\"main\" :form=\"props.form\"></slot>\n    <slot name=\"footer\"></slot>\n    <slot name=\"action\" :on-save=\"onSave\"></slot>\n  </form>\n</template>","<script setup lang=\"ts\">\nimport { toRef } from 'vue'\nimport { useField } from 'vee-validate'\n\nconst props = defineProps<{\n  type?: string | 'text'\n  value?: string | ''\n  name: string\n  placeholder?: string | ''\n  disabled?: boolean | false\n}>();\n\nconst name = toRef(props, 'name');\n\nconst { value: inputValue, errorMessage, handleBlur, handleChange, meta } = useField(name, undefined, {\n  initialValue: props.value,\n});\n</script>\n\n<template>\n  <input class=\"form-input\"\n         :name=\"name\"\n         :id=\"name\"\n         :type=\"type\"\n         :value=\"inputValue\"\n         :placeholder=\"placeholder\"\n         @input=\"handleChange\"\n         @blur=\"handleBlur\"\n         :disabled=\"disabled\"\n  />\n</template>\n"],"names":["onSubmit","e","formData","searchParams","pair","response","useFetch","_a","props","_c","_b","swal","err","name","toRef","inputValue","errorMessage","handleBlur","handleChange","meta","useField"],"mappings":"8ZA+DA,eAAeA,EAASC,EAA0B,WAChDA,EAAE,eAAe,EAEjB,MAAMC,EAAW,IAAI,SAASD,EAAE,MAAM,EAC7BC,EAAA,OAAO,SAAU,QAAQ,EAE5B,MAAAC,EAAe,IAAI,gBAEzB,UAAWC,KAAQF,EACjBC,EAAa,OAAOC,EAAK,GAAIA,EAAK,EAAE,EAGlC,GAAA,CACF,MAAMC,EAAW,MAAMC,EACnB,qDAA+DC,EAAAC,EAAM,aAAN,YAAAD,EAAkB,OAAME,GAAAC,EAAAF,EAAM,aAAN,YAAAE,EAAkB,QAAlB,YAAAD,EAAyB,KAChH,CACE,OAAQ,OACR,QAAS,IACT,KAAMN,CACR,CAAA,EAEE,MAAAQ,EAAK,CAAC,KAAMN,EAAS,QAAS,KAAMA,EAAS,WAAW,QAEvDO,GACD,MAAAD,EAAK,CAAC,KAAMC,EAAI,QAAS,KAAMA,EAAI,WAAW,CACtD,CACF,uwBC7EMC,EAAOC,EAAMN,EAAO,MAAM,EAE1B,CAAE,MAAOO,EAAY,aAAAC,EAAc,WAAAC,EAAY,aAAAC,EAAc,KAAAC,GAASC,EAASP,EAAM,OAAW,CACpG,aAAcL,EAAM,KAAA,CACrB"}